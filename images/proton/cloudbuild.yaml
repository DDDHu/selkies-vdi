# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

timeout: 3600s
options:
  machineType: "N1_HIGHCPU_32"
  diskSizeGb: "512"

substitutions:
  _USE_CACHE: "true"
  _IMAGE_PREFIX: vdi-proton
  _IMAGE_TAG: latest
  _PROTON_VERSION: proton_5.0

tags:
  - vdi-proton-image

###
# Images to be pushed
###
images: [
    # Base image
    'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-base:${_IMAGE_TAG}',
    'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-base:latest',
    # App image
    'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-app:${_IMAGE_TAG}',
    'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-app:latest'
]

###
# Artifacts saved to GCS
###
artifacts:
  objects:
    location: gs://${PROJECT_ID}-proton/
    paths:
      - 'proton_dist_${_PROTON_VERSION}.tar.gz'

steps:
###
# create bucket for artifcats
###
- name: 'gcr.io/cloud-builders/gcloud'
  id: dist-gcs-bucket
  entrypoint: /bin/bash
  args:
    - "-exc"
    - |-
        gsutil mb gs://${PROJECT_ID}-proton || true
  waitFor: ["-"]

###
# Base image
###
- name: 'gcr.io/cloud-builders/docker'
  id: base-pull
  entrypoint: 'bash'
  args: ["-c", "if [[ '${_USE_CACHE}' == 'true' ]]; then (docker pull gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-base:latest || exit 0); fi"]
  waitFor: ["-"]
- name: 'gcr.io/cloud-builders/docker'
  id: base
  args: [
            'build',
            '-t', 'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-base:${_IMAGE_TAG}',
            '--cache-from', 'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-base:latest',
            'proton-base'
        ]
  waitFor:
    - base-pull
- name: 'gcr.io/cloud-builders/docker'
  id: base-tags
  args: [
            'tag',
            'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-base:${_IMAGE_TAG}',
            'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-base:latest',
        ]
  waitFor:
    - base
- name: 'gcr.io/cloud-builders/docker'
  id: base-push
  args: [
            'push',
            'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-base:latest',
        ]
  waitFor:
    - base-tags

###
# Pull dist from GCS if _USE_CACHE is true
###
- name: 'gcr.io/cloud-builders/gcloud'
  id: fetch-dist-cache
  entrypoint: /bin/bash
  args: ["-c", "if [[ '${_USE_CACHE}' == 'true' ]]; then (gsutil cp gs://${PROJECT_ID}-proton/proton_dist_${_PROTON_VERSION}.tar.gz ./ || exit 0); fi"]
  waitFor: ["-"]

###
# Build the proton dist with the base image
###
- name: 'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-base:${_IMAGE_TAG}'
  id: dist-build
  dir: /workspace
  entrypoint: /bin/bash
  args:
    - "-exc"
    - |-
        if [[ -e proton_dist_${_PROTON_VERSION}.tar.gz && '${_USE_CACHE}' == 'true' ]]; then
          echo "INFO: Found cached build archive, skipping build."
          exit 0
        fi

        cd /opt/
        git clone -b ${_PROTON_VERSION} https://github.com/ValveSoftware/Proton.git proton
        cd proton/
        git submodule update --init
        ./configure.sh --no-steam-runtime --build-name "Proton ${_PROTON_VERSION} My"
        export NO_NESTED_MAKE=1
        export SUBMAKE_JOBS=$(getconf _NPROCESSORS_ONLN)

        make -j$(getconf _NPROCESSORS_ONLN) cmake32
        make -j$(getconf _NPROCESSORS_ONLN) cmake64

        make -j$(getconf _NPROCESSORS_ONLN) faudio32
        make -j$(getconf _NPROCESSORS_ONLN) faudio64

        make -j$(getconf _NPROCESSORS_ONLN) wine32
        make -j$(getconf _NPROCESSORS_ONLN) wine64

        make -j$(getconf _NPROCESSORS_ONLN) dxvk

        make -j$(getconf _NPROCESSORS_ONLN) lsteamclient32
        make -j$(getconf _NPROCESSORS_ONLN) lsteamclient64

        make -j$(getconf _NPROCESSORS_ONLN) vrclient32
        make -j$(getconf _NPROCESSORS_ONLN) vrclient64

        make -j$(getconf _NPROCESSORS_ONLN) dist
        make -j$(getconf _NPROCESSORS_ONLN) fonts

        tar -C ./dist/dist -c . | gzip -c -1 > /workspace/proton_dist_${_PROTON_VERSION}.tar.gz
  waitFor:
    - base-push
    - fetch-dist-cache

###
# App image
###
- name: 'gcr.io/cloud-builders/docker'
  id: app-pull
  entrypoint: 'bash'
  args: ["-c", "if [[ '${_USE_CACHE}' == 'true' ]]; then (docker pull gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-app:latest || exit 0); fi"]
  waitFor: ["-"]
- name: 'gcr.io/cloud-builders/docker'
  id: app
  dir: /workspace
  entrypoint: /bin/bash
  args:
    - "-exc"
    - |-
        cp proton_dist_${_PROTON_VERSION}.tar.gz proton-app/
        
        docker build \
          -t gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-app:${_IMAGE_TAG} \
          --cache-from gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-app:latest \
          --build-arg BASE_IMAGE=gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-base:latest \
          --build-arg DIST_ARCHIVE=proton_dist_${_PROTON_VERSION}.tar.gz \
          proton-app
  waitFor:
    - app-pull
    - dist-build
- name: 'gcr.io/cloud-builders/docker'
  id: app-tags
  args: [
            'tag',
            'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-app:${_IMAGE_TAG}',
            'gcr.io/${PROJECT_ID}/${_IMAGE_PREFIX}-app:latest',
        ]
  waitFor:
    - app
