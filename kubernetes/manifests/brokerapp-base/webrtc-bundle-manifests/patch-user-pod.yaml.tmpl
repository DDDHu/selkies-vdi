# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apps/v1
kind: StatefulSet
metadata:
   name: vdi
   annotations:
     gke.accel.vdi/user: "{{.User}}"
spec:
  {{- if .UserParams.enablePersistence}}
  {{- if eq .UserParams.enablePersistence "true"}}
  volumeClaimTemplates:
  - metadata:
      name: persist
      annotations:
        gke.accel.vdi/user: "{{.User}}"
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 50Gi
  {{- end}}
  {{- end}}
  template:
    metadata:
      annotations:
        gke.accel.vdi/user: "{{.User}}"
    spec:
      enableServiceLinks: false
      nodeSelector:
        app.broker/initialized: "true"
        app.broker/tier: {{ .NodeTier.NodeLabel }}
        cloud.google.com/gke-accelerator-initialized: "true"
        cloud.google.com/gke-nodepool: "{{ .NodeTier.NodeLabel }}"
      tolerations:
        - key: "app.broker/tier"
          effect: "NoSchedule"
          operator: "Exists"
        - key: "app.broker/node-init"
          effect: "NoSchedule"
          operator: "Exists"
        - key: "nvidia.com/gpu"
          effect: "NoSchedule"
          operator: "Exists"
        - key: "cloud.google.com/gke-accelerator-init"
          effect: "NoSchedule"
          operator: "Exists"
      {{- if .UserParams.enablePersistence}}
      {{- if eq .UserParams.enablePersistence "true"}}
      initContainers:
      - name: persist-init
        image: busybox:latest
        command: ["/bin/chown", "1000:1000", "/home/app"]
        volumeMounts:
        - name: persist
          mountPath: /home/app
      {{- end}}
      {{- end}}
      containers:
      {{- if .UserParams.compat32 }}
      {{- if eq .UserParams.compat32 "true"}}
      - name: xserver
        resources:
          limits:
            # Virtual uinput mouse for relative mouse motion
            # control socket is shared with webrtc container.
            uinput.dev/mouse: 1
      {{- end}}
      {{- end}}
      - name: desktop
        # Replace image with user provided image from broker.
        image: {{.ImageRepo}}:{{.ImageTag}}
        # Allow entrypoint command override from app config spec.
        {{- if .AppParams.command}}
        command: ["/bin/bash", "-c"]
        args:
          - |
{{.AppParams.command | nindent 12}}
        {{- end}}
        {{- if .UserParams.enableJoystick }}
        {{- if eq .UserParams.enableJoystick "true"}}
        resources:
          limits:
            # hotplug support for uinput devices.
            # note: does not work with X11 HAL
            uinput.dev/container: 1
            # Virtual joystick with control socket shared with webrtc container.
            uinput.dev/js: 1
        {{- end}}
        {{- end}}
        {{- if .UserParams.enablePersistence}}
        {{- if eq .UserParams.enablePersistence "true"}}
        volumeMounts:
        - name: persist
          mountPath: /home/app
        {{- end}}
        {{- end}}
        env:
        - name: VDI_USER
          value: "{{.User}}"
        # Add the userParams to the env prefixed with VDI_
        {{- range $key, $value := .UserParams }}
        - name: VDI_{{ $key }}
          value: "{{ $value }}" 
        {{- end}}
        # Add environment vars from brokerappconfig spec.
        {{- range $item := .AppSpec.AppEnv }}
        - name: {{$item.Name}}
          value: "{{$item.Value}}"
        {{- end}}
      - name: webrtc
        env:
        - name: APP_AUTO_INIT
          value: "{{default "true" .AppParams.appAutoInit}}"
        - name: ENABLE_AUDIO
          value: "{{.UserParams.enableAudio}}"
        {{- if .AppParams.enableClipboard }}
        - name: ENABLE_CLIPBOARD
          value: "{{.AppParams.enableClipboard}}"
        {{- end}}
        {{- if .UserParams.compat32 }}
        {{- if eq .UserParams.compat32 "true"}}
        - name: UINPUT_MOUSE_SOCKET
          value: "/var/run/appconfig/mouse0ctl"
        {{- end}}
        {{- end}}
        {{- if .UserParams.enableJoystick }}
        {{- if eq .UserParams.enableJoystick "true"}}
        - name: UINPUT_JS_SOCKET
          value: "/var/run/appconfig/js0ctl"
        {{- end}}
        {{- end}}
      - name: watchdog
        env:
        - name: POD_USER
          value: "{{.User}}"
        - name: APP_NAME
          value: "{{.App}}"
        {{- if .UserParams.idleShutdown}}
        - name: WATCHDOG_TIMEOUT
          value: "{{.AppParams.idleShutdownTimeout}}"
        {{- end}}
      {{- if .UserParams.appDev}}
      {{- if eq .UserParams.appDev "true"}}
      - name: appdev
        securityContext:
          privileged: true
        tty: true
        {{- if .UserParams.appDevImage}}
        image: {{.UserParams.appDevImage}}
        {{- else}}
        image: debian:buster
        {{- end}}
        imagePullPolicy: Always
        command: ["/bin/bash", "-c", "while true; do sleep 1000; done"]
        env:
          - name: DISPLAY
            value: ":0"
          - name: LD_LIBRARY_PATH
            value: "/usr/local/nvidia/lib64:/usr/local/nvidia/lib32"
        volumeMounts:
          - name: nvidia
            mountPath: /usr/local/nvidia
            readOnly: true
          # make nvidia-smi available in general PATH
          - name: nvidia
            mountPath: /usr/local/bin/nvidia-smi
            subPath: bin/nvidia-smi
            readOnly: true
          # Shared mount for X11 socket.
          - name: x11
            mountPath: /tmp/.X11-unix
      {{- end}}
      {{- end}}